package it.smartcommunitylabdhub.core.components.kubernetes.kaniko;

import io.fabric8.kubernetes.api.model.ConfigMap;
import io.fabric8.kubernetes.api.model.ConfigMapBuilder;
import io.fabric8.kubernetes.api.model.ConfigMapVolumeSource;
import io.fabric8.kubernetes.api.model.Pod;
import io.fabric8.kubernetes.api.model.PodBuilder;
import io.fabric8.kubernetes.api.model.Secret;
import io.fabric8.kubernetes.api.model.SecretBuilder;
import io.fabric8.kubernetes.api.model.Volume;
import io.fabric8.kubernetes.api.model.VolumeMountBuilder;
import io.fabric8.kubernetes.api.model.storage.VolumeAttachmentSourceFluentImpl;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.dsl.PodResource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

//////////////////////// TO USE THI BUILDER //////////////////////////////
// HelloWorld.java deve essere messo in /config
//
// FROM {{baseImage}}
//
// # Add additional instructions here
// COPY HelloWorld.java /app
// WORKDIR /app
// RUN javac HelloWorld.java
//
// ENTRYPOINT ["java", "HelloWorld"]
//
//////////////////////////////////////
// DockerBuildConfiguration buildConfig = new DockerBuildConfiguration();
// buildConfig.setBaseImage("adoptopenjdk:11-jdk-hotspot");
// buildConfig.setEntrypointCommand("java HelloWorld");

// try {
//     DockerfileGenerator.generateDockerfile(buildConfig);
//     KanikoImageBuilder.buildDockerImage(buildConfig);
//     String image = "your-registry/your-image-name:tag"; // Specify the image generated by Kaniko
//     KubernetesJobGenerator.generateKubernetesJob(image);
// } catch (IOException e) {
//     e.printStackTrace();
// }
//
///////////////////////////////////////////////////////////////////////////

public class KanikoImageBuilder {

        public static void buildDockerImage(KubernetesClient kubernetesClient, DockerBuildConfiguration buildConfig)
                        throws IOException {
                // Generate the Dockerfile
                String dockerFileContent = DockerfileGenerator.generateDockerfile(buildConfig);

                // Create config map
                ConfigMap configMap = new ConfigMapBuilder()
                                .addToData("Dockerfile", dockerFileContent)
                                .withNewMetadata()
                                .withName("kaniko-config-map")
                                .endMetadata()
                                .build();

                kubernetesClient.resource(configMap).inNamespace("default").create();

                // Create the Docker Hub Secret
                Map<String, String> dockerHubAuthData = new HashMap<>();
                dockerHubAuthData.put("username", "ltrubbianifbk");
                dockerHubAuthData.put("password", "aa2gcCBFys4UTx4");

                Secret dockerHubSecret = new SecretBuilder()
                                .withNewMetadata().withName("dockerhub-secret").endMetadata()
                                .withType("kubernetes.io/basic-auth")
                                .addToData(dockerHubAuthData)
                                .build();

                kubernetesClient.resource(dockerHubSecret).inNamespace("default").create();

                // Configure Kaniko build
                Pod pod = new PodBuilder()
                                .withNewMetadata().withName("kaniko-build-pod").endMetadata()
                                .withNewSpec()
                                .addNewVolume()
                                .withName("config-volume")
                                .withNewConfigMap()
                                .withName("kaniko-config-map")
                                .endConfigMap()
                                .endVolume()
                                .addNewVolume()
                                .withName("secret-volume")
                                .withNewSecret()
                                .withSecretName("dockerhub-secret")
                                .endSecret()
                                .endVolume()
                                .addNewContainer()
                                .withName("kaniko-container")
                                .withImage("gcr.io/kaniko-project/executor:v1.6.0")
                                .addNewEnv().withName("DOCKER_CONFIG").withValue("/kaniko/.docker").endEnv()
                                .withVolumeMounts(
                                                new VolumeMountBuilder().withName("config-volume")
                                                                .withMountPath("/config").build(),
                                                new VolumeMountBuilder().withName("secret-volume")
                                                                .withMountPath("/kaniko/.docker").build())
                                .withCommand("/kaniko/executor")
                                .withArgs("--dockerfile=/config/Dockerfile", "--context=/config",
                                                "--destination=docker.io/ltrubbiani/hello-java:latest")
                                .endContainer()
                                .withRestartPolicy("Never")
                                .endSpec()
                                .build();

                // Create the Pod
                kubernetesClient.resource(pod).inNamespace("default").create();

                // Wait for the build to complete
                PodResource podResource = kubernetesClient
                                .pods()
                                .inNamespace("default")
                                .withName("kaniko-build-pod");

                try {
                        podResource.waitUntilCondition(p -> p.getStatus().getPhase().equals("Succeeded"), 10,
                                        TimeUnit.MINUTES);
                        System.out.println("Docker image build completed successfully.");
                } catch (Exception e) {
                        System.out.println("Docker image build failed or timed out: " + e.getMessage());
                }

                // Cleanup the Pod, ConfigMap, and Secret
                podResource.delete();
                kubernetesClient.configMaps().inNamespace("default").withName("kaniko-config-map").delete();
                kubernetesClient.secrets().inNamespace("default").withName("dockerhub-secret").delete();

        }
}
