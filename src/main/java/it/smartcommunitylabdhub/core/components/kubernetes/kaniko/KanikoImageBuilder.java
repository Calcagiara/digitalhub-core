package it.smartcommunitylabdhub.core.components.kubernetes.kaniko;

import io.fabric8.kubernetes.api.model.ConfigMap;
import io.fabric8.kubernetes.api.model.ConfigMapBuilder;
import io.fabric8.kubernetes.api.model.EnvVarBuilder;
import io.fabric8.kubernetes.api.model.KeyToPath;
import io.fabric8.kubernetes.api.model.Secret;
import io.fabric8.kubernetes.api.model.SecretBuilder;
import io.fabric8.kubernetes.api.model.VolumeMountBuilder;
import io.fabric8.kubernetes.api.model.batch.v1.Job;
import io.fabric8.kubernetes.api.model.batch.v1.JobBuilder;
import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.dsl.ScalableResource;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

//////////////////////// TO USE THI BUILDER //////////////////////////////
// HelloWorld.java deve essere messo in /target path
//
// FROM {{baseImage}}
//
// # Add additional instructions here
// COPY HelloWorld.java /app
// WORKDIR /app
// RUN javac HelloWorld.java
//
// ENTRYPOINT ["java", "HelloWorld"]
//
//////////////////////////////////////
// DockerBuildConfiguration buildConfig = new DockerBuildConfiguration();
// buildConfig.setBaseImage("adoptopenjdk:11-jdk-hotspot");
// buildConfig.setEntrypointCommand("java HelloWorld");

// try {
//     DockerfileGenerator.generateDockerfile(buildConfig);
//     KanikoImageBuilder.buildDockerImage(buildConfig);
//     String image = "your-registry/your-image-name:tag"; // Specify the image generated by Kaniko
//     KubernetesJobGenerator.generateKubernetesJob(image);
// } catch (IOException e) {
//     e.printStackTrace();
// }
//
///////////////////////////////////////////////////////////////////////////

public class KanikoImageBuilder {

        // FIXME: ASYNC JOB
        // [x]: DONE! this builder work for FOLDER strategy building.
        public static void buildDockerImage(
                        KubernetesClient kubernetesClient,
                        DockerBuildConfiguration buildConfig)
                        throws IOException {
                // Generate the Dockerfile
                String dockerFileContent = DockerfileGenerator.generateDockerfile(buildConfig);
                String javaFile = Files.readString(
                                Path.of("/home/ltrubbiani/Labs/digitalhub-core/kubernetes/target/HelloWorld.java"));
                // Create config map
                ConfigMap configMap = new ConfigMapBuilder()
                                .addToData("Dockerfile", dockerFileContent)
                                .addToData("HelloWorld.java", javaFile) // Test purpose
                                .withNewMetadata()
                                .withName("kaniko-config-map")
                                .endMetadata()
                                .build();

                kubernetesClient.resource(configMap).inNamespace("default").create();

                Secret dockerHubSecret = new SecretBuilder().withNewMetadata()
                                .withName("dockerhub-secret")
                                .endMetadata()
                                .withType("kubernetes.io/dockerconfigjson")
                                .addToData(".dockerconfigjson", getDockerConfigJson())
                                .build();

                kubernetesClient.resource(dockerHubSecret).inNamespace("default").create();

                KeyToPath keyToPath = new KeyToPath();
                keyToPath.setKey(".dockerconfigjson");
                keyToPath.setPath("config.json");

                // Configure Kaniko build
                Job job = new JobBuilder()
                                .withNewMetadata()
                                // FIXME: job name must be created with "kaniko-build-job" + uuid + name
                                .withName("kaniko-build-job").endMetadata()
                                .withNewSpec()
                                .withNewTemplate()
                                .withNewSpec()

                                // Add Init container alpine
                                .addNewInitContainer()
                                // FIXME: init container name must be uuid + name
                                .withName("kaniko-retrieve-data")
                                .withImage("alpine:latest")
                                .withVolumeMounts(
                                                new VolumeMountBuilder()
                                                                .withName("shared-dir")
                                                                .withMountPath("/shared")
                                                                .build())
                                .withCommand("sh")
                                .withArgs("-c", "wget " + buildConfig.getSharedData()
                                                + " -O /shared/data.tgz && tar xf /shared/data.tgz -C /shared")
                                .endInitContainer()

                                // Add Kaniko container
                                .addNewContainer()
                                .withName("kaniko-container")
                                .withImage("gcr.io/kaniko-project/executor:latest")
                                .withVolumeMounts(
                                                new VolumeMountBuilder()
                                                                .withName("kaniko-config")
                                                                .withMountPath("/build").build(),
                                                new VolumeMountBuilder()
                                                                .withName("kaniko-secret")
                                                                .withMountPath("/kaniko/.docker").build(),
                                                new VolumeMountBuilder()
                                                                .withName("shared-dir")
                                                                .withMountPath("/shared")
                                                                .build())
                                .withEnv(new EnvVarBuilder().withName("DOCKER_CONFIG")
                                                .withValue("/kaniko/.docker")
                                                .build())

                                .withCommand("/kaniko/executor")
                                .withArgs("--dockerfile=/build/Dockerfile",
                                                "--context=/build",
                                                "--destination=ltrubbianifbk/hello-world:latest")
                                .endContainer()

                                // COMMENT: SHARED VOLUME
                                // Shared Volume
                                .addNewVolume().withName("shared-dir")
                                .endVolume()

                                // Kaniko Config
                                .addNewVolume().withName("kaniko-config")
                                .withNewConfigMap()
                                .withName("kaniko-config-map")
                                .endConfigMap()
                                .endVolume()

                                // Kaniko Secret
                                .addNewVolume().withName("kaniko-secret")
                                .withNewSecret()
                                .withSecretName("dockerhub-secret")
                                .withItems(keyToPath)
                                .endSecret()
                                .endVolume()

                                // Restart Policy
                                .withRestartPolicy("Never")
                                .endSpec()
                                .endTemplate()
                                .endSpec()
                                .build();

                // Create the Pod
                kubernetesClient.resource(job).inNamespace("default").create();

                // Wait for the build to complete
                ScalableResource<Job> jobResource = kubernetesClient.batch().v1().jobs()
                                .inNamespace("default")
                                .withName("kaniko-build-job");

                // HACK: delay execution to check pod activities
                // try {
                // Thread.sleep(15000); // Adjust the delay as needed
                // } catch (InterruptedException e) {
                // e.printStackTrace();
                // }
                try {
                        jobResource.waitUntilCondition(
                                        j -> j.getStatus().getSucceeded() != null &&
                                                        job.getStatus().getSucceeded() > 0,
                                        10, TimeUnit.MINUTES);
                        System.out.println("Docker image build completed successfully.");
                } catch (Exception e) {
                        System.out.println("Docker image build failed or timed out: " + e.getMessage());
                }

                // Cleanup the Pod, ConfigMap, and Secret
                jobResource.delete();
                kubernetesClient.configMaps().inNamespace("default").withName("kaniko-config-map").delete();
                kubernetesClient.secrets().inNamespace("default").withName("dockerhub-secret").delete();

        }

        /**
         * Kaniko / Docker authentication.
         * Is used to push the image built by kaniko on hub.docker.io
         * 
         * @return String
         */
        private static String getDockerConfigJson() {
                // Replace with your Docker Hub credentials
                String username = "ltrubbianifbk";
                String password = "aa2gcCBFys4UTx4";
                String email = "ltrubbiani@fbk.eu";

                // Create the Docker config JSON
                Map<String, Object> auths = new HashMap<>();
                Map<String, String> auth = new HashMap<>();
                auth.put("username", username);
                auth.put("password", password);
                auth.put("email", email);
                auth.put("auth", Base64.getEncoder().encodeToString((username + ":" + password).getBytes()));
                auths.put("https://index.docker.io/v1/", auth);

                Map<String, Object> configData = new HashMap<>();
                configData.put("auths", auths);

                ObjectMapper objectMapper = new ObjectMapper();
                String json;
                try {
                        json = objectMapper.writeValueAsString(configData);
                } catch (JsonProcessingException e) {
                        throw new RuntimeException("Failed to create Docker config JSON.", e);
                }

                // Base64 encode the JSON
                return Base64.getEncoder().encodeToString(json.getBytes());
        }

}
